package com.footballay.core

import com.footballay.core.infra.persistence.apisports.entity.*
import com.footballay.core.infra.persistence.apisports.entity.live.*
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.entity.TeamCore
import com.footballay.core.infra.persistence.core.repository.LeagueCoreRepository
import com.footballay.core.infra.persistence.core.repository.TeamCoreRepository
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsSeasonRepository
import com.footballay.core.infra.persistence.apisports.repository.TeamApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.FixtureApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.live.ApiSportsMatchTeamRepository
import com.footballay.core.infra.util.UidGenerator
import com.footballay.core.logger
import org.springframework.boot.test.context.TestComponent
import org.springframework.stereotype.Component
import java.time.OffsetDateTime

/**
 * ApiSports Backbone 테스트용 엔티티 팩토리
 * 
 * ApiSports Backbone 동기화 테스트에 필요한 엔티티들을 쉽게 생성할 수 있도록 도와주는 테스트 전용 유틸리티입니다.
 * 스프링 테스트 컨텍스트에서 빈으로 관리되어 모든 repository가 자동 주입됩니다.
 */
@TestComponent
class ApiSportsBackboneEntityGenerator(
    // Core repositories
    private val leagueCoreRepository: LeagueCoreRepository,
    private val teamCoreRepository: TeamCoreRepository,
    
    // ApiSports repositories
    private val leagueApiSportsRepository: LeagueApiSportsRepository,
    private val leagueApiSportsSeasonRepository: LeagueApiSportsSeasonRepository,
    private val teamApiSportsRepository: TeamApiSportsRepository,
    private val fixtureApiSportsRepository: FixtureApiSportsRepository,
    private val apiSportsMatchTeamRepository: ApiSportsMatchTeamRepository,
    
    // Utilities
    private val uidGenerator: UidGenerator
) {
    
    private val log = logger()
    
    /**
     * 완전한 ApiSports Backbone 엔티티 생태계를 생성합니다.
     */
    fun createCompleteBackboneEntities(config: BackboneConfig = BackboneConfig()): BackboneEntities {
        log.info("완전한 ApiSports Backbone 엔티티 생태계 생성 시작: {}", config)
        
        // 1. Core entities
        val leagueCore = createLeagueCore(config.leagueName)
        
        // 2. ApiSports entities
        val leagueApiSports = createLeagueApiSports(leagueCore, config.leagueApiId)
        val season = createLeagueApiSportsSeason(leagueApiSports, config.seasonYear)
        val teams = createTeamApiSports(config.teamConfigs)
        val fixtures = createFixtureApiSports(season, teams, config)
        
        val result = BackboneEntities(
            // Core
            leagueCore = leagueCore,
            
            // ApiSports
            leagueApiSports = leagueApiSports,
            season = season,
            teams = teams,
            fixtures = fixtures
        )
        
        log.info("완전한 ApiSports Backbone 엔티티 생태계 생성 완료")
        return result
    }
    
    // --- Private helper methods ---
    
    private fun createLeagueCore(name: String): LeagueCore {
        return leagueCoreRepository.save(
            LeagueCore(
                uid = uidGenerator.generateUid(),
                name = name,
                available = true,
                autoGenerated = false
            )
        )
    }
    
    private fun createLeagueApiSports(leagueCore: LeagueCore, apiId: Long): LeagueApiSports {
        return leagueApiSportsRepository.save(
            LeagueApiSports(
                leagueCore = leagueCore,
                apiId = apiId,
                name = leagueCore.name,
                type = "League",
                countryName = "England",
                countryCode = "GB",
                currentSeason = 2024
            )
        )
    }
    
    private fun createLeagueApiSportsSeason(leagueApiSports: LeagueApiSports, seasonYear: Int): LeagueApiSportsSeason {
        return leagueApiSportsSeasonRepository.save(
            LeagueApiSportsSeason(
                seasonYear = seasonYear,
                seasonStart = "$seasonYear-08-17",
                seasonEnd = "${seasonYear + 1}-05-25",
                coverage = LeagueApiSportsCoverage(
                    fixturesEvents = true,
                    fixturesLineups = true,
                    fixturesStatistics = true,
                    fixturesPlayers = true,
                    standings = true
                ),
                leagueApiSports = leagueApiSports
            )
        )
    }
    
    private fun createTeamApiSports(configs: List<TeamConfig>): List<TeamApiSports> {
        return configs.map { config ->
            val teamCore = teamCoreRepository.save(
                TeamCore(
                    uid = uidGenerator.generateUid(),
                    name = config.name,
                    code = config.code,
                    country = config.country,
                    founded = config.founded,
                    autoGenerated = false
                )
            )
            
            teamApiSportsRepository.save(
                TeamApiSports(
                    teamCore = teamCore,
                    apiId = config.apiId,
                    name = config.name,
                    code = config.code,
                    country = config.country,
                    founded = config.founded,
                    national = false
                )
            )
        }
    }
    
    private fun createFixtureApiSports(
        season: LeagueApiSportsSeason,
        teams: List<TeamApiSports>,
        config: BackboneConfig
    ): List<FixtureApiSports> {
        return config.fixtureConfigs.mapIndexed { index, fixtureConfig ->
            val homeTeam = teams[index % teams.size]
            val awayTeam = teams[(index + 1) % teams.size]
            
            // ApiSportsMatchTeam 생성
            val homeMatchTeam = apiSportsMatchTeamRepository.save(
                ApiSportsMatchTeam(
                    teamApiSports = homeTeam,
                    formation = "4-3-3",
                    playerColor = UniformColor(
                        primary = "ea0000",
                        number = "ffffff",
                        border = "ea0000"
                    ),
                    goalkeeperColor = UniformColor(
                        primary = "000000",
                        number = "ffffff",
                        border = "000000"
                    ),
                    winner = null
                )
            )
            
            val awayMatchTeam = apiSportsMatchTeamRepository.save(
                ApiSportsMatchTeam(
                    teamApiSports = awayTeam,
                    formation = "4-2-3-1",
                    playerColor = UniformColor(
                        primary = "0000ff",
                        number = "ffffff",
                        border = "0000ff"
                    ),
                    goalkeeperColor = UniformColor(
                        primary = "000000",
                        number = "ffffff",
                        border = "000000"
                    ),
                    winner = null
                )
            )
            
            fixtureApiSportsRepository.save(
                FixtureApiSports(
                    core = null, // Core는 별도로 생성하지 않음
                    apiId = fixtureConfig.apiId,
                    referee = fixtureConfig.referee,
                    timezone = "UTC",
                    date = fixtureConfig.kickoffTime,
                    timestamp = fixtureConfig.kickoffTime.toEpochSecond(),
                    round = fixtureConfig.round,
                    status = ApiSportsStatus(
                        longStatus = "Not Started",
                        shortStatus = "NS",
                        elapsed = null,
                        extra = null
                    ),
                    score = ApiSportsScore(
                        totalHome = null,
                        totalAway = null,
                        halftimeHome = null,
                        halftimeAway = null,
                        fulltimeHome = null,
                        fulltimeAway = null
                    ),
                    venue = null,
                    season = season,
                    homeTeam = homeMatchTeam,
                    awayTeam = awayMatchTeam
                )
            )
        }
    }
}

/**
 * ApiSports Backbone 엔티티 생성을 위한 설정 클래스
 */
data class BackboneConfig(
    // League info
    val leagueName: String = "Test Premier League",
    val leagueApiId: Long = 39L,
    val seasonYear: Int = 2024,
    
    // Team configurations
    val teamConfigs: List<TeamConfig> = defaultTeamConfigs(),
    
    // Fixture configurations
    val fixtureConfigs: List<FixtureConfig> = defaultFixtureConfigs()
) {
    companion object {
        fun defaultTeamConfigs(): List<TeamConfig> = listOf(
            TeamConfig("Manchester United", "MUN", "England", 1878, 33L),
            TeamConfig("Arsenal", "ARS", "England", 1886, 42L),
            TeamConfig("Chelsea", "CHE", "England", 1905, 49L),
            TeamConfig("Liverpool", "LIV", "England", 1892, 40L)
        )
        
        fun defaultFixtureConfigs(): List<FixtureConfig> = listOf(
            FixtureConfig(12345L, "Michael Oliver", "Regular Season - 10", OffsetDateTime.now().plusDays(1)),
            FixtureConfig(12346L, "Anthony Taylor", "Regular Season - 11", OffsetDateTime.now().plusDays(2)),
            FixtureConfig(12347L, "Paul Tierney", "Regular Season - 12", OffsetDateTime.now().plusDays(3))
        )
    }
}

/**
 * 팀 생성을 위한 설정 클래스
 */
data class TeamConfig(
    val name: String,
    val code: String,
    val country: String,
    val founded: Int,
    val apiId: Long
)

/**
 * Fixture 생성을 위한 설정 클래스
 */
data class FixtureConfig(
    val apiId: Long,
    val referee: String,
    val round: String,
    val kickoffTime: OffsetDateTime
)

/**
 * 생성된 모든 ApiSports Backbone 엔티티들을 담는 컨테이너 클래스
 */
data class BackboneEntities(
    // Core entities
    val leagueCore: LeagueCore,
    
    // ApiSports entities
    val leagueApiSports: LeagueApiSports,
    val season: LeagueApiSportsSeason,
    val teams: List<TeamApiSports>,
    val fixtures: List<FixtureApiSports>
) 