package com.footballay.core.infra.apisports.backbone.sync.league

import com.footballay.core.infra.apisports.shared.dto.LeagueApiSportsCoverageCreateDto
import com.footballay.core.infra.apisports.shared.dto.LeagueApiSportsCreateDto
import com.footballay.core.infra.apisports.shared.dto.LeagueApiSportsSeasonCreateDto
import com.footballay.core.infra.util.UidGenerator
import com.footballay.core.infra.persistence.apisports.entity.LeagueApiSports
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsSeasonRepository
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.repository.LeagueCoreRepository
import com.footballay.core.logger
import jakarta.persistence.EntityManager
import jakarta.persistence.PersistenceContext
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.ActiveProfiles
import org.springframework.transaction.annotation.Transactional

/**
 * LeagueApiSportsWithCoreSyncSyncer 통합 테스트
 * 
 * ## 테스트 범위
 * - 비즈니스 로직 검증: 리그 동기화 및 Core 생성
 * - 시즌 정보 및 커버리지 데이터 동기화 검증
 * - 기존 리그 업데이트 및 새 리그 생성 혼재 처리
 * - 예외 처리: 잘못된 입력 및 엣지 케이스 처리
 * - 데이터 무결성: Core 시스템과의 연동 검증
 * 
 * ## 주요 테스트 시나리오
 * - 새로운 리그 추가 및 Core 자동 생성
 * - 기존 리그 업데이트 및 새 리그 생성 혼재 처리
 * - 시즌 정보 및 커버리지 데이터 동기화
 * - 예외 상황 처리 (잘못된 데이터, Core 누락 등)
 * 
 * @author Footballay Core Team
 * @since 1.0.0
 */
@SpringBootTest
@ActiveProfiles("dev","devrealapi")
@Transactional
class LeagueApiSportsWithCoreSyncerIntegrationTest {

    val log = logger()

    @Autowired
    private lateinit var leagueApiSportsSyncer: LeagueApiSportsWithCoreSyncer

    @Autowired
    private lateinit var leagueApiSportsRepository: LeagueApiSportsRepository

    @Autowired
    private lateinit var leagueApiSportsSeasonRepository: LeagueApiSportsSeasonRepository

    @Autowired
    private lateinit var leagueCoreRepository: LeagueCoreRepository

    @Autowired
    private lateinit var uidGenerator: UidGenerator

    @PersistenceContext
    private lateinit var em: EntityManager

    /**
     * 통합 테스트 1: 새로운 리그들을 추가하고 정상적으로 생성되는지 검증 (Case 3)
     */
    @Test
    fun `새로운 리그들을 추가하면 LeagueCore와 LeagueApiSports가 정상적으로 생성되어야 한다`() {
        log.info("=== 테스트: 새로운 리그 추가 및 Core 자동 생성 ===")
        
        // Given
        val leagueDtos = listOf(
            createLeagueDto(39L, "Premier League", "England"),
            createLeagueDto(140L, "La Liga", "Spain")
        )
        log.info("처리할 리그 DTO: ${leagueDtos.map { "${it.name}(${it.apiId})" }}")

        // When
        log.info("실행: saveLeagues() 호출")
        leagueApiSportsSyncer.saveLeagues(leagueDtos)
        flushAndClear()
        log.info("동기화 완료: ${leagueDtos.size}개 리그 처리됨")

        // Then
        log.info("검증 시작")
        
        // 1. LeagueApiSports 엔티티 확인
        val savedLeagueApiSports = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L, 140L))
        assertEquals(2, savedLeagueApiSports.size)
        log.info("LeagueApiSports 엔티티 검증 완료: ${savedLeagueApiSports.size}개 저장됨")

        // 2. LeagueCore 엔티티 확인
        val premierLeague = savedLeagueApiSports.find { it.apiId == 39L }
        assertNotNull(premierLeague)
        assertNotNull(premierLeague?.leagueCore)
        assertEquals("Premier League", premierLeague?.leagueCore?.name)
        assertTrue(premierLeague?.leagueCore?.autoGenerated == true)
        assertFalse(premierLeague?.leagueCore?.available == true)
        log.info("Premier League Core 검증 완료: autoGenerated=${premierLeague?.leagueCore?.autoGenerated}, available=${premierLeague?.leagueCore?.available}")

        val laLiga = savedLeagueApiSports.find { it.apiId == 140L }
        assertNotNull(laLiga)
        assertNotNull(laLiga?.leagueCore)
        assertEquals("La Liga", laLiga?.leagueCore?.name)
        log.info("La Liga Core 검증 완료")

        // 3. 시즌 정보 확인
        val premierLeagueSeasons = leagueApiSportsSeasonRepository.findAllByLeagueApiSports(premierLeague!!)
        assertEquals(2, premierLeagueSeasons.size)
        assertTrue(premierLeagueSeasons.any { it.seasonYear == 2023 })
        assertTrue(premierLeagueSeasons.any { it.seasonYear == 2024 })
        log.info("시즌 정보 검증 완료: ${premierLeagueSeasons.size}개 시즌 (2023, 2024)")
    }

    /**
     * 통합 테스트 2: 기존 리그 정보를 업데이트하는 경우 정상 처리되는지 검증 (Case 1)
     */
    @Test
    fun `기존 리그 정보를 업데이트하는 경우 정상적으로 업데이트되어야 한다`() {
        // Given
        // 기존 리그 생성
        val leagueUid = uidGenerator.generateUid()
        val existingLeagueCore = LeagueCore(
            uid = leagueUid,
            name = "Premier League (Old)",
            autoGenerated = true,
            available = false
        )
        val savedLeagueCore = leagueCoreRepository.save(existingLeagueCore)

        val existingLeagueApiSports = LeagueApiSports(
            leagueCore = savedLeagueCore,
            apiId = 39L,
            name = "Premier League (Old)",
            type = "League",
            countryName = "England"
        )
        leagueApiSportsRepository.save(existingLeagueApiSports)
        flushAndClear()

        // 업데이트할 DTO
        val updateDto = createLeagueDto(39L, "Premier League (Updated)", "England")

        // When
        leagueApiSportsSyncer.saveLeagues(listOf(updateDto))
        flushAndClear()

        // Then
        val updatedLeagueApiSports = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L)).first()
        assertEquals("Premier League (Updated)", updatedLeagueApiSports.name)
        assertEquals("England", updatedLeagueApiSports.countryName)
        
        // LeagueCore는 변경되지 않아야 함
        assertEquals(savedLeagueCore.id, updatedLeagueApiSports.leagueCore?.id)
        assertEquals("Premier League (Old)", updatedLeagueApiSports.leagueCore?.name) // Core는 업데이트되지 않음
    }

    /**
     * 통합 테스트 3: LeagueApiSports는 존재하지만 LeagueCore가 없는 비정상 케이스 처리 검증 (Case 2)
     */
    @Test
    fun `LeagueApiSports만 존재하고 LeagueCore가 없는 경우 자동으로 생성되어야 한다`() {
        // Given
        // LeagueCore 없는 LeagueApiSports 생성
        val leagueApiSportsWithoutCore = LeagueApiSports(
            leagueCore = null,
            apiId = 39L,
            name = "Premier League",
            type = "League",
            countryName = "England"
        )
        leagueApiSportsRepository.save(leagueApiSportsWithoutCore)
        flushAndClear()

        val leagueDto = createLeagueDto(39L, "Premier League", "England")

        // When
        leagueApiSportsSyncer.saveLeagues(listOf(leagueDto))
        flushAndClear()

        // Then
        val updatedLeagueApiSports = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L)).first()
        assertNotNull(updatedLeagueApiSports.leagueCore)
        assertEquals("Premier League", updatedLeagueApiSports.leagueCore?.name)
        assertTrue(updatedLeagueApiSports.leagueCore?.autoGenerated == true)
    }

    /**
     * 통합 테스트 4: 혼합 케이스 - 새로운 리그, 업데이트할 리그, 복구할 리그가 모두 포함된 경우
     */
    @Test
    fun `새로운 리그, 업데이트할 리그, 복구할 리그가 혼합된 경우 모두 정상 처리되어야 한다`() {
        // Given
        // Case 1: 기존 리그 (업데이트 대상)
        val leagueUid1 = uidGenerator.generateUid()
        val existingLeagueCore1 = LeagueCore(
            uid = leagueUid1,
            name = "Premier League (Old)",
            autoGenerated = true,
            available = false
        )
        val savedLeagueCore1 = leagueCoreRepository.save(existingLeagueCore1)

        val existingLeagueApiSports1 = LeagueApiSports(
            leagueCore = savedLeagueCore1,
            apiId = 39L,
            name = "Premier League (Old)",
            type = "League"
        )
        leagueApiSportsRepository.save(existingLeagueApiSports1)

        // Case 2: LeagueCore 없는 LeagueApiSports (복구 대상)
        val leagueApiSportsWithoutCore = LeagueApiSports(
            leagueCore = null,
            apiId = 140L,
            name = "La Liga (Without Core)",
            type = "League"
        )
        leagueApiSportsRepository.save(leagueApiSportsWithoutCore)

        flushAndClear()

        // 혼합 DTO 목록
        val mixedDtos = listOf(
            createLeagueDto(39L, "Premier League (Updated)", "England"), // Case 1: 업데이트
            createLeagueDto(140L, "La Liga (Recovered)", "Spain"),        // Case 2: 복구
            createLeagueDto(61L, "Ligue 1", "France")                     // Case 3: 새로 생성
        )

        // When
        leagueApiSportsSyncer.saveLeagues(mixedDtos)
        flushAndClear()

        // Then
        val allLeagues = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L, 140L, 61L))
        assertEquals(3, allLeagues.size)

        // Case 1 검증: 업데이트된 리그
        val updatedPremier = allLeagues.find { it.apiId == 39L }
        assertNotNull(updatedPremier)
        assertEquals("Premier League (Updated)", updatedPremier?.name)
        assertEquals(savedLeagueCore1.id, updatedPremier?.leagueCore?.id)

        // Case 2 검증: 복구된 리그
        val recoveredLaLiga = allLeagues.find { it.apiId == 140L }
        assertNotNull(recoveredLaLiga)
        assertEquals("La Liga (Recovered)", recoveredLaLiga?.name)
        assertNotNull(recoveredLaLiga?.leagueCore)

        // Case 3 검증: 새로 생성된 리그
        val newLigue1 = allLeagues.find { it.apiId == 61L }
        assertNotNull(newLigue1)
        assertEquals("Ligue 1", newLigue1?.name)
        assertNotNull(newLigue1?.leagueCore)
        assertEquals("Ligue 1", newLigue1?.leagueCore?.name)
    }

    /**
     * 통합 테스트 5: 시즌 정보와 커버리지 정보가 정상적으로 저장되는지 검증
     */
    @Test
    fun `시즌 정보와 커버리지 정보가 정상적으로 저장되어야 한다`() {
        // Given
        val coverage = LeagueApiSportsCoverageCreateDto(
            fixturesEvents = true,
            fixturesLineups = true,
            fixturesStatistics = true,
            fixturesPlayers = true,
            standings = true,
            players = true,
            topScorers = true,
            topAssists = true,
            topCards = false,
            injuries = false,
            predictions = true,
            odds = true
        )

        val seasons = listOf(
            LeagueApiSportsSeasonCreateDto(
                seasonYear = 2023,
                seasonStart = "2023-08-01",
                seasonEnd = "2024-05-31",
                coverage = coverage
            ),
            LeagueApiSportsSeasonCreateDto(
                seasonYear = 2024,
                seasonStart = "2024-08-01",
                seasonEnd = "2025-05-31",
                coverage = coverage
            )
        )

        val leagueDto = LeagueApiSportsCreateDto(
            apiId = 39L,
            name = "Premier League",
            type = "League",
            logo = "https://example.com/logo.png",
            countryName = "England",
            countryCode = "GB",
            countryFlag = "https://example.com/flag.png",
            currentSeason = 2024,
            seasons = seasons
        )

        // When
        leagueApiSportsSyncer.saveLeagues(listOf(leagueDto))
        flushAndClear()

        // Then
        val savedLeague = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L)).first()
        val savedSeasons = leagueApiSportsSeasonRepository.findAllByLeagueApiSports(savedLeague)
        
        assertEquals(2, savedSeasons.size)
        
        val season2023 = savedSeasons.find { it.seasonYear == 2023 }
        assertNotNull(season2023)
        assertEquals("2023-08-01", season2023?.seasonStart)
        assertEquals("2024-05-31", season2023?.seasonEnd)
        
        val coverage2023 = season2023?.coverage
        assertNotNull(coverage2023)
        assertTrue(coverage2023?.fixturesEvents == true)
        assertTrue(coverage2023?.standings == true)
        assertFalse(coverage2023?.topCards == true)
        assertFalse(coverage2023?.injuries == true)
    }

    /**
     * 통합 테스트 6: 반복적인 업데이트 후에도 데이터 일관성이 유지되는지 검증
     */
    @Test
    fun `반복적인 업데이트 후에도 데이터 일관성이 유지되어야 한다`() {
        // Given - 초기 리그 생성
        val initialDto = createLeagueDto(39L, "Premier League v1", "England")
        leagueApiSportsSyncer.saveLeagues(listOf(initialDto))
        flushAndClear()

        val initialLeague = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L)).first()
        val initialCoreId = initialLeague.leagueCore?.id

        // When - 여러 번 업데이트
        val updateDto1 = createLeagueDto(39L, "Premier League v2", "England")
        leagueApiSportsSyncer.saveLeagues(listOf(updateDto1))
        flushAndClear()

        val updateDto2 = createLeagueDto(39L, "Premier League v3", "England")
        leagueApiSportsSyncer.saveLeagues(listOf(updateDto2))
        flushAndClear()

        // Then - 최종 상태 확인
        val finalLeague = leagueApiSportsRepository.findLeagueApiSportsInApiId(listOf(39L)).first()
        
        // LeagueApiSports는 업데이트됨
        assertEquals("Premier League v3", finalLeague.name)
        
        // LeagueCore는 동일한 인스턴스 유지
        assertEquals(initialCoreId, finalLeague.leagueCore?.id)
        
        // 전체 리그 수는 1개 유지
        val allLeagues = leagueApiSportsRepository.findAll()
        assertEquals(1, allLeagues.size)
    }

    /**
     * 테스트 데이터 생성 헬퍼 메서드
     */
    private fun createLeagueDto(
        apiId: Long,
        name: String,
        countryName: String,
        currentSeason: Int = 2024
    ): LeagueApiSportsCreateDto {
        val coverage = LeagueApiSportsCoverageCreateDto(
            fixturesEvents = true,
            fixturesLineups = true,
            fixturesStatistics = true,
            fixturesPlayers = true,
            standings = true,
            players = true,
            topScorers = true,
            topAssists = true,
            topCards = true,
            injuries = true,
            predictions = true,
            odds = true
        )

        val seasons = listOf(
            LeagueApiSportsSeasonCreateDto(
                seasonYear = 2023,
                seasonStart = "2023-08-01",
                seasonEnd = "2024-05-31",
                coverage = coverage
            ),
            LeagueApiSportsSeasonCreateDto(
                seasonYear = 2024,
                seasonStart = "2024-08-01",
                seasonEnd = "2025-05-31",
                coverage = coverage
            )
        )

        return LeagueApiSportsCreateDto(
            apiId = apiId,
            name = name,
            type = "League",
            logo = "https://example.com/logo_$apiId.png",
            countryName = countryName,
            countryCode = when(countryName) {
                "England" -> "GB"
                "Spain" -> "ES"
                "France" -> "FR"
                else -> "XX"
            },
            countryFlag = "https://example.com/flag_$countryName.png",
            currentSeason = currentSeason,
            seasons = seasons
        )
    }

    private inline fun flushAndClear() {
        em.flush()
        em.clear()
    }
} 