package com.footballay.core.infra.apisports

import com.footballay.core.infra.apisports.dto.TeamApiSportsCreateDto
import com.footballay.core.infra.apisports.dto.VenueApiSportsCreateDto
import com.footballay.core.infra.core.util.UidGenerator
import com.footballay.core.infra.persistence.apisports.entity.LeagueApiSports
import com.footballay.core.infra.persistence.apisports.entity.TeamApiSports
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.TeamApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.VenueApiSportsRepository
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.entity.TeamCore
import com.footballay.core.infra.persistence.core.repository.LeagueCoreRepository
import com.footballay.core.infra.persistence.core.repository.TeamCoreRepository
import com.footballay.core.logger
import jakarta.persistence.EntityManager
import jakarta.persistence.PersistenceContext
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.ActiveProfiles
import org.springframework.transaction.annotation.Transactional

@SpringBootTest
@ActiveProfiles("dev","devrealapi")
@Transactional
class TeamApiSportsSyncerIntegrationTest {

    val log = logger()

    @Autowired
    private lateinit var teamApiSportsSyncer: TeamApiSportsSyncer

    @Autowired
    private lateinit var leagueApiSportsRepository: LeagueApiSportsRepository

    @Autowired
    private lateinit var teamApiRepository: TeamApiSportsRepository

    @Autowired
    private lateinit var venueRepository: VenueApiSportsRepository

    @Autowired
    private lateinit var leagueCoreRepository: LeagueCoreRepository

    @Autowired
    private lateinit var teamCoreRepository: TeamCoreRepository

    @Autowired
    private lateinit var uidGenerator: UidGenerator

    @PersistenceContext
    private lateinit var em: EntityManager

    private var leagueApiId: Long = 0
    private lateinit var leagueCore: LeagueCore
    private lateinit var leagueApiSports: LeagueApiSports

    @BeforeEach
    fun setUp() {
        createTestLeague()
    }

    /**
     * 통합 테스트 1: 리그에 새로운 팀들을 추가하고 연관관계가 정상적으로 설정되는지 검증
     */
    @Test
    fun `리그에 새로운 팀들을 추가하면 연관관계가 정상적으로 설정되어야 한다`() {
        // Given
        val teamDtos = listOf(
            createTeamDto(101L, "Manchester United"),
            createTeamDto(102L, "Liverpool FC")
        )
        log.info(teamDtos.toString())

        // When
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, teamDtos)
        flushAndClear()

        // Then
        // 1. TeamApiSports 엔티티 확인
        val savedTeams = teamApiRepository.findAllByApiIdIn(listOf(101L, 102L))
        assertEquals(2, savedTeams.size)

        // 2. TeamCore 엔티티 확인
        val teamCores = teamCoreRepository.findAllByApiIdInWithLeagues(listOf(101L, 102L))
        assertEquals(2, teamCores.size)

        // 3. LeagueCore-TeamCore 연관관계 확인
        val refreshedLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val teamsInLeague = refreshedLeagueCore.leagueTeams.mapNotNull { it.team }
        assertEquals(2, teamsInLeague.size)
        assertTrue(teamsInLeague.any { it.apiId == 101L })
        assertTrue(teamsInLeague.any { it.apiId == 102L })
    }

    /**
     * 통합 테스트 2: 기존 팀을 업데이트하고 새 팀을 추가하는 경우 모두 정상 처리되는지 검증
     */
    @Test
    fun `기존 팀을 업데이트하고 새 팀을 추가하는 경우 모두 정상 처리되어야 한다`() {
        // Given
        // 기존 팀 생성
        val teamUid = uidGenerator.generateUid()

        val existingTeamCore = TeamCore(
            uid = teamUid,
            name = "Manchester United (Old)",
            apiId = 101L,
            available = false,
            autoGenerated = true
        )
        val savedTeamCore = teamCoreRepository.save(existingTeamCore)
        savedTeamCore.addLeague(leagueCore)
        leagueCoreRepository.save(leagueCore)

        // TeamApiSports 생성
        val existingTeamApiSports = TeamApiSports(
            teamCore = savedTeamCore,
            apiId = 101L,
            name = "Manchester United (Old)",
            code = "MNU"
        )
        teamApiRepository.save(existingTeamApiSports)

        // 업데이트할 DTO 목록 (기존 팀 업데이트 + 새 팀 추가)
        val teamDtos = listOf(
            createTeamDto(101L, "Manchester United (Updated)"), // 업데이트
            createTeamDto(102L, "Liverpool FC") // 새로 추가
        )

        // When
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, teamDtos)
        flushAndClear()

        // Then
        // 1. 업데이트된 TeamApiSports 확인
        val updatedTeam = teamApiRepository.findTeamApiSportsByApiIdWithTeamCore(101L)
        assertNotNull(updatedTeam)
        assertEquals("Manchester United (Updated)", updatedTeam?.name)

        // 2. 새로 추가된 팀 확인
        val newTeam = teamApiRepository.findTeamApiSportsByApiIdWithTeamCore(102L)
        assertNotNull(newTeam)
        assertEquals("Liverpool FC", newTeam?.name)

        // 3. LeagueCore-TeamCore 연관관계 확인
        val refreshedLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val teamsInLeague = refreshedLeagueCore.leagueTeams.mapNotNull { it.team }
        assertEquals(2, teamsInLeague.size)
    }

    /**
     * 통합 테스트 3: DTO 목록에 없는 팀은 리그와의 연관관계가 제거되는지 검증
     */
    @Test
    fun `DTO 목록에 없는 팀은 리그와의 연관관계가 제거되어야 한다`() {
        // Given
        // 기존 팀 두 개 생성
        val team1 = createAndSaveTeamWithRelationship(101L, "Manchester United")
        val team2 = createAndSaveTeamWithRelationship(102L, "Liverpool FC")

        // 하나의 팀만 포함된 DTO 목록 (102L은 제거해야 함)
        val teamDtos = listOf(
            createTeamDto(101L, "Manchester United")
        )

        // When
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, teamDtos)
        flushAndClear()

        // Then
        // LeagueCore-TeamCore 연관관계 확인
        val refreshedLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val teamsInLeague = refreshedLeagueCore.leagueTeams.mapNotNull { it.team }

        // 한 팀만 남아있어야 함
        assertEquals(1, teamsInLeague.size)
        assertEquals(101L, teamsInLeague[0].apiId)

        // 제거된 팀 확인 (팀 자체는 여전히 존재하지만 리그와의 연관관계만 제거됨)
        val removedTeamCore = teamCoreRepository.findByApiId(102L)
        assertNotNull(removedTeamCore)
        assertEquals(0, removedTeamCore?.leagueTeams?.size)
    }

    /**
     * 통합 테스트 4: 경기장(Venue) 정보가 팀 데이터와 함께 정상적으로 처리되는지 검증
     */
    @Test
    fun `경기장 정보가 팀 데이터와 함께 정상적으로 처리되어야 한다`() {
        // Given
        val venueDto = VenueApiSportsCreateDto(
            apiId = 201L,
            name = "Old Trafford",
            address = "Sir Matt Busby Way",
            city = "Manchester",
            capacity = 75000,
            surface = "grass",
            image = "venue-image-url"
        )

        val teamDtos = listOf(
            createTeamDto(101L, "Manchester United", venueDto)
        )

        // When
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, teamDtos)
        flushAndClear()

        // Then
        val savedTeam = teamApiRepository.findTeamApiSportsByApiIdWithTeamCore(101L)
        assertNotNull(savedTeam?.venue)
        assertEquals("Old Trafford", savedTeam?.venue?.name)
        assertEquals(75000, savedTeam?.venue?.capacity)
    }

    /**
     * 통합 테스트 5: TeamApiSports 엔티티는 존재하지만 TeamCore가 없는 비정상 케이스 처리 검증
     */
    @Test
    fun `TeamApiSports만 존재하고 TeamCore가 없는 경우 자동으로 생성되어야 한다`() {
        // Given
        // TeamCore 없는 TeamApiSports 생성
        val teamApiSportsWithoutCore = TeamApiSports(
            teamCore = null,
            apiId = 101L,
            name = "Manchester United",
            code = "MUN"
        )
        teamApiRepository.save(teamApiSportsWithoutCore)
        flushAndClear()

        val teamDtos = listOf(
            createTeamDto(101L, "Manchester United")
        )

        // When
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, teamDtos)
        flushAndClear()

        // Then
        val updatedTeam = teamApiRepository.findTeamApiSportsByApiIdWithTeamCore(101L)
        assertNotNull(updatedTeam?.teamCore)
        assertEquals("Manchester United", updatedTeam?.teamCore?.name)

        // LeagueCore-TeamCore 연관관계 확인
        val refreshedLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val teamsInLeague = refreshedLeagueCore.leagueTeams.mapNotNull { it.team }
        assertEquals(1, teamsInLeague.size)
    }

    /**
     * 통합 테스트 6: 반복적인 업데이트 후에도 리그에 속한 팀 목록이 정확하게 유지되는지 검증
     */
    @Test
    fun `반복적인 업데이트 후에도 리그에 속한 팀 목록이 정확하게 유지되어야 한다`() {
        // Given - 초기 팀 3개 생성
        val initialTeams = listOf(
            createTeamDto(101L, "Manchester United"),
            createTeamDto(102L, "Liverpool FC"),
            createTeamDto(103L, "Arsenal FC")
        )
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, initialTeams)

        // 초기 상태 확인
        val initialLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val initialTeamsInLeague = initialLeagueCore.leagueTeams.mapNotNull { it.team }
        assertEquals(3, initialTeamsInLeague.size)

        // When - 두 팀 제거하고 한 팀 추가 (101은 유지, 102/103 제거, 104 추가)
        val updatedTeams = listOf(
            createTeamDto(101L, "Manchester United"),
            createTeamDto(104L, "Chelsea FC")
        )
        teamApiSportsSyncer.saveTeamsOfLeague(leagueApiId, updatedTeams)
        flushAndClear()

        // Then - 리그에 2개의 팀만 있어야 함
        val updatedLeagueCore = leagueCoreRepository.findById(leagueCore.id!!).get()
        val updatedTeamsInLeague = updatedLeagueCore.leagueTeams.mapNotNull { it.team }
        assertEquals(2, updatedTeamsInLeague.size)

        // 정확한 팀이 남아있는지 확인
        val teamApiIds = updatedTeamsInLeague.mapNotNull { it.apiId }
        assertTrue(teamApiIds.contains(101L))
        assertTrue(teamApiIds.contains(104L))
        assertFalse(teamApiIds.contains(102L))
        assertFalse(teamApiIds.contains(103L))

        // 제거된 팀 엔티티는 여전히 존재하지만 리그와의 연관관계만 제거되었는지 확인
        val removedTeam = teamCoreRepository.findByApiId(102L)
        assertNotNull(removedTeam)
        assertEquals(0, removedTeam?.leagueTeams?.size)
    }

    /**
     * 테스트 데이터 생성 헬퍼 메서드
     */
    private fun createTestLeague() {
        // LeagueCore 생성
        val leagueUid = uidGenerator.generateUid()
        log.info("leagueUid 생성 확인: $leagueUid")

        // UID 유효성 확인
        if (!uidGenerator.isValidUid(leagueUid)) {
            throw IllegalStateException("생성된 리그 UID가 유효하지 않습니다: $leagueUid")
        }

        leagueCore = LeagueCore(
            uid = leagueUid,
            name = "Premier League",
            available = true,
            autoGenerated = false
        )
        val savedLeagueCore = leagueCoreRepository.save(leagueCore)

        // LeagueApiSports 생성
        leagueApiId = 39L
        leagueApiSports = LeagueApiSports(
            leagueCore = savedLeagueCore,
            apiId = leagueApiId,
            name = "Premier League",
            type = "League",
            countryName = "England"
        )
        leagueApiSportsRepository.save(leagueApiSports)

        flushAndClear()
        leagueCore = em.merge(leagueCore)
        leagueApiSports = em.merge(leagueApiSports)
    }

    private fun createAndSaveTeamWithRelationship(apiId: Long, name: String): TeamCore {
        // TeamCore 생성
        val teamUid = uidGenerator.generateUid() // 고유한 UID 생성
        log.info("teamUid 생성 확인: $teamUid")

        // UID 유효성 확인
        if (!uidGenerator.isValidUid(teamUid)) {
            throw IllegalStateException("생성된 UID가 유효하지 않습니다: $teamUid")
        }

        val teamCore = TeamCore(
            uid = teamUid,
            name = name,
            apiId = apiId,
            available = true,
            autoGenerated = true
        )
        val savedTeamCore = teamCoreRepository.save(teamCore)

        // 리그와 연관관계 설정
        savedTeamCore.addLeague(leagueCore)
        leagueCoreRepository.save(leagueCore)

        // TeamApiSports 생성
        val teamApiSports = TeamApiSports(
            teamCore = savedTeamCore,
            apiId = apiId,
            name = name,
            code = name.take(3).uppercase()
        )
        teamApiRepository.save(teamApiSports)

        return savedTeamCore
    }

    private fun createTeamDto(
        apiId: Long,
        name: String,
        venue: VenueApiSportsCreateDto? = null
    ): TeamApiSportsCreateDto {
        return TeamApiSportsCreateDto(
            apiId = apiId,
            name = name,
            code = "${name.take(3).uppercase()}",
            country = "England",
            founded = 1900,
            national = false,
            logo = "https://example.com/logos/$apiId.png",
            venue = venue
        )
    }

    private inline fun flushAndClear() {
        em.flush()
        em.clear()
    }


    /**
     * 통합 테스트 7: 존재하지 않는 리그 API ID로 호출 시 예외가 발생하는지 검증
     */
    @Test
    fun `존재하지 않는 리그 API ID로 호출 시 예외가 발생해야 한다`() {
        // Given
        val nonExistentLeagueApiId = 9999L
        val teamDtos = listOf(createTeamDto(101L, "Manchester United"))

        // Then
        assertThrows(IllegalArgumentException::class.java) {
            // When
            teamApiSportsSyncer.saveTeamsOfLeague(nonExistentLeagueApiId, teamDtos)
        }
    }


    /**
     * 통합 테스트 8: LeagueApiSports는 존재하지만 LeagueCore가 없는 비정상 케이스 처리 검증
     */
    @Test
    fun `LeagueApiSports는 존재하지만 LeagueCore가 없는 경우 예외가 발생해야 한다`() {
        // Given
        // LeagueCore가 없는 LeagueApiSports 생성
        val leagueApiSportsWithoutCore = LeagueApiSports(
            leagueCore = null, // Core 없음
            apiId = 999L,
            name = "Test League Without Core",
            type = "League",
            countryName = "Test Country"
        )
        leagueApiSportsRepository.save(leagueApiSportsWithoutCore)
        flushAndClear()

        val teamDtos = listOf(createTeamDto(101L, "Manchester United"))

        // Then
        assertThrows(IllegalArgumentException::class.java) {
            // When
            teamApiSportsSyncer.saveTeamsOfLeague(999L, teamDtos)
        }
    }

}
