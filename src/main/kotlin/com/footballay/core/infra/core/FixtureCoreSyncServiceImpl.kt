package com.footballay.core.infra.core

import com.footballay.core.infra.core.dto.FixtureCoreCreateDto
import com.footballay.core.infra.core.dto.FixtureCoreUpdateDto
import com.footballay.core.infra.persistence.core.entity.FixtureCore
import com.footballay.core.infra.persistence.core.entity.FixtureStatusShort
import com.footballay.core.infra.persistence.core.repository.FixtureCoreRepository
import com.footballay.core.infra.util.UidGenerator
import com.footballay.core.logger
import jakarta.transaction.Transactional
import org.springframework.stereotype.Service
import java.time.OffsetDateTime

@Service
class FixtureCoreSyncServiceImpl(
    private val fixtureCoreRepository: FixtureCoreRepository,
    private val uidGenerator: UidGenerator
) : FixtureCoreSyncService {
    
    private val log = logger()
    
    override fun <T> generateUidPairs(requests: List<T>): List<Pair<String, T>> {
        return requests.map { request ->
            val uid = uidGenerator.generateUid()
            uid to request
        }
    }
    
    @Transactional
    override fun createFixtureCores(createPairs: List<Pair<String, FixtureCoreCreateDto>>): Map<String, FixtureCore> {
        if (createPairs.isEmpty()) {
            return emptyMap()
        }
        
        val fixtureCores = createPairs.map { (uid, createDto) ->
            createFixtureCore(uid, createDto)
        }
        
        val savedFixtureCores = fixtureCoreRepository.saveAll(fixtureCores)
        
        return savedFixtureCores.associateBy { it.uid }
    }
    
    @Transactional
    override fun updateFixtureCores(updatePairs: List<Pair<FixtureCore, FixtureCoreUpdateDto>>): Map<String, FixtureCore> {
        if (updatePairs.isEmpty()) {
            return emptyMap()
        }
        
        val updatedFixtureCores = updatePairs.map { (fixtureCore, updateDto) ->
            updateFixtureCore(fixtureCore, updateDto)
        }
        
        val savedFixtureCores = fixtureCoreRepository.saveAll(updatedFixtureCores)
        
        return savedFixtureCores.associateBy { it.uid }
    }
    
    private fun createFixtureCore(uid: String, createDto: FixtureCoreCreateDto): FixtureCore {
        return FixtureCore(
            uid = uid,
            kickoff = createDto.kickoff,
            timestamp = createDto.timestamp,
            status = createDto.status ?: "Unknown",
            statusShort = createDto.statusShort ?: FixtureStatusShort.NS,
            elapsedMin = createDto.elapsedMin,
            league = createDto.leagueCore,
            homeTeam = createDto.homeTeam,
            awayTeam = createDto.awayTeam,
            goalsHome = createDto.goalsHome,
            goalsAway = createDto.goalsAway,
            finished = createDto.finished,
            available = createDto.available,
            autoGenerated = createDto.autoGenerated
        )
    }
    
    private fun updateFixtureCore(fixtureCore: FixtureCore, updateDto: FixtureCoreUpdateDto): FixtureCore {
        updateDto.kickoff?.let { fixtureCore.kickoff = it }
        updateDto.timestamp?.let { fixtureCore.timestamp = it }
        updateDto.status?.let { fixtureCore.status = it }
        updateDto.statusShort?.let { fixtureCore.statusShort = it }
        updateDto.elapsedMin?.let { fixtureCore.elapsedMin = it }
        updateDto.goalsHome?.let { fixtureCore.goalsHome = it }
        updateDto.goalsAway?.let { fixtureCore.goalsAway = it }
        updateDto.finished?.let { fixtureCore.finished = it }
        updateDto.available?.let { fixtureCore.available = it }
        
        return fixtureCore
    }
} 