package com.footballay.core.infra.core

import com.footballay.core.infra.apisports.shared.dto.TeamApiSportsCreateDto
import com.footballay.core.infra.core.dto.TeamCoreCreateDto
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.entity.TeamCore
import com.footballay.core.infra.persistence.core.repository.TeamCoreRepository
import com.footballay.core.infra.util.UidGenerator
import com.footballay.core.logger
import jakarta.transaction.Transactional
import org.springframework.stereotype.Service

@Service
class TeamCoreSyncServiceImpl(
    private val teamCoreRepository: TeamCoreRepository,
    private val uidGenerator: UidGenerator
) : TeamCoreSyncService {

    private val log = logger()

    @Transactional
    override fun saveTeamCore(dto: TeamCoreCreateDto): TeamCore {
        // UID 생성 및 유효성 검사
        val uid = uidGenerator.generateUid()
        if (!uidGenerator.isValidUid(uid)) {
            throw IllegalArgumentException("Invalid UID format: $uid")
        }

        // TeamCore 엔티티 생성
        val teamCore = TeamCore(
            uid = uid,
            name = dto.name,
            autoGenerated = dto.autoGenerated
        )

        // 저장 및 반환 (영속 상태)
        return teamCoreRepository.save(teamCore)
    }

    @Transactional
    override fun saveTeamCoreFromApiSports(dto: TeamApiSportsCreateDto): TeamCore {
        // UID 생성 및 유효성 검사
        val uid = uidGenerator.generateUid()
        if (!uidGenerator.isValidUid(uid)) {
            throw IllegalArgumentException("Invalid UID format: $uid")
        }

        // TeamCore 엔티티 생성
        val teamCore = TeamCore(
            uid = uid,
            name = dto.name,
            code = dto.code,
            country = dto.country,
            founded = dto.founded,
            national = dto.national ?: false,
            autoGenerated = true
        )

        // 저장 및 반환 (영속 상태)
        return teamCoreRepository.save(teamCore)
    }

    @Transactional
    override fun saveTeamCoresFromApiSports(dtos: List<TeamApiSportsCreateDto>): List<TeamCore> {
        // 배치 처리를 위한 TeamCore 엔티티들 생성
        val teamCores = dtos.map { dto ->
            val uid = uidGenerator.generateUid()
            if (!uidGenerator.isValidUid(uid)) {
                throw IllegalArgumentException("Invalid UID format: $uid")
            }

            TeamCore(
                uid = uid,
                name = dto.name,
                code = dto.code,
                country = dto.country,
                founded = dto.founded,
                national = dto.national ?: false,
                autoGenerated = true
            )
        }

        // 배치로 저장
        val savedTeamCores = teamCoreRepository.saveAll(teamCores)
        log.info("Batch saved ${savedTeamCores.size} TeamCore entities")
        
        return savedTeamCores
    }

    @Transactional
    override fun createTeamLeagueRelationship(teamCore: TeamCore, leagueCore: LeagueCore) {
        // Team-League 연관관계 설정 (양방향)
        teamCore.addLeague(leagueCore)
        
        // 변경사항 저장
        teamCoreRepository.save(teamCore)
    }

    @Transactional
    override fun updateTeamCore(teamCore: TeamCore, dto: TeamApiSportsCreateDto): TeamCore {
        // 기본 정보 업데이트
        teamCore.apply {
            name = dto.name
            code = dto.code
            country = dto.country
            founded = dto.founded
            national = dto.national ?: false
        }

        // 저장 및 반환
        return teamCoreRepository.save(teamCore)
    }

    @Transactional
    override fun updateTeamCores(teamCoreDtos: List<Pair<TeamCore, TeamApiSportsCreateDto>>): List<TeamCore> {
        val updatedTeamCores = teamCoreDtos.map { (teamCore, dto) ->
            teamCore.apply {
                name = dto.name
                code = dto.code
                country = dto.country
                founded = dto.founded
                national = dto.national ?: false
            }
        }
        val savedTeamCores = teamCoreRepository.saveAll(updatedTeamCores)
        log.info("Batch updated ${savedTeamCores.size} TeamCore entities")
        return savedTeamCores
    }

    @Transactional
    override fun createTeamCoresFromApiSports(apiIdTeamCorePairs: List<Pair<Long, TeamApiSportsCreateDto>>): Map<Long, TeamCore> {
        // 1. ApiId와 UID 매핑 생성 (임시 TeamCore 생성 시점)
        val apiIdToUidMap = mutableMapOf<Long, String>()
        
        val teamCores = apiIdTeamCorePairs.map { (apiId, dto) ->
            val uid = uidGenerator.generateUid()
            apiIdToUidMap[apiId] = uid // ApiId -> UID 매핑 저장
            
            TeamCore(
                uid = uid,
                name = dto.name,
                code = dto.code,
                country = dto.country,
                founded = dto.founded,
                national = dto.national ?: false
            )
        }
        
        // 2. 배치 저장
        val savedTeamCores = teamCoreRepository.saveAll(teamCores)
        log.info("Batch created ${savedTeamCores.size} TeamCore entities")
        
        // 3. UID를 키로 사용하여 ApiId와 TeamCore 매핑 생성
        val uidToTeamCoreMap = savedTeamCores.associateBy { it.uid }
        
        // 4. ApiId -> UID -> TeamCore 순서로 최종 매핑 생성
        return apiIdToUidMap.mapValues { (apiId, uid) ->
            uidToTeamCoreMap[uid] ?: throw IllegalStateException("TeamCore not found for UID: $uid (ApiId: $apiId)")
        }
    }
} 