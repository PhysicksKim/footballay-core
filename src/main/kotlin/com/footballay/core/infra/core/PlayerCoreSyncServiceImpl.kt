package com.footballay.core.infra.core

import com.footballay.core.infra.apisports.backbone.sync.PlayerApiSportsCreateDto
import com.footballay.core.infra.persistence.core.entity.PlayerCore
import com.footballay.core.infra.persistence.core.entity.TeamCore
import com.footballay.core.infra.persistence.core.repository.PlayerCoreRepository
import com.footballay.core.infra.util.UidGenerator
import com.footballay.core.logger
import jakarta.transaction.Transactional
import org.springframework.stereotype.Service

@Service
class PlayerCoreSyncServiceImpl(
    private val playerCoreRepository: PlayerCoreRepository,
    private val uidGenerator: UidGenerator
) : PlayerCoreSyncService {

    private val log = logger()

    @Transactional
    override fun savePlayerCore(dto: PlayerApiSportsCreateDto): PlayerCore {
        val playerCore = createPlayerCore(dto)
        val savedPlayerCore = playerCoreRepository.save(playerCore)
        log.info("Created PlayerCore: ${savedPlayerCore.name} (UID: ${savedPlayerCore.uid})")
        return savedPlayerCore
    }

    @Transactional
    override fun savePlayerCoreFromApiSports(dto: PlayerApiSportsCreateDto): PlayerCore {
        return savePlayerCore(dto)
    }

    @Transactional
    override fun createPlayerCoresFromApiSports(dtos: List<Pair<Long, PlayerApiSportsCreateDto>>): Map<Long, PlayerCore> {
        val apiIdToUidMap = mutableMapOf<Long, String>()

        val playerCores = dtos.map { (apiId, dto) ->
            val uid = uidGenerator.generateUid()
            apiIdToUidMap[apiId] = uid

            PlayerCore(
                uid = uid,
                name = dto.name ?: "Unknown",
                firstname = dto.firstname,
                lastname = dto.lastname,
                age = dto.age,
                nationality = dto.nationality,
                position = dto.position,
                autoGenerated = true
            )
        }
        val savedPlayerCores = playerCoreRepository.saveAll(playerCores)
        log.info("Batch created ${savedPlayerCores.size} PlayerCore entities")

        val uidToPlayerCoreMap = savedPlayerCores.associateBy { it.uid }

        return apiIdToUidMap.mapValues { (apiId, uid) ->
            uidToPlayerCoreMap[uid] ?: throw IllegalStateException("PlayerCore not found for UID: $uid (ApiId: $apiId)")
        }
    }

    @Transactional
    override fun updatePlayerCore(playerCore: PlayerCore, dto: PlayerApiSportsCreateDto): PlayerCore {
        playerCore.apply {
            name = dto.name ?: name
            firstname = dto.firstname
            lastname = dto.lastname
            age = dto.age
            nationality = dto.nationality
            position = dto.position
        }
        
        val updatedPlayerCore = playerCoreRepository.save(playerCore)
        log.info("Updated PlayerCore: ${updatedPlayerCore.name} (ID: ${updatedPlayerCore.id})")
        return updatedPlayerCore
    }

    @Transactional
    override fun updatePlayerCores(playerCoreDtos: List<Pair<PlayerCore, PlayerApiSportsCreateDto>>): List<PlayerCore> {
        val updatedPlayerCores = playerCoreDtos.map { (playerCore, dto) ->
            updatePlayerCore(playerCore, dto)
        }
        
        log.info("Batch updated ${updatedPlayerCores.size} PlayerCore entities")
        return updatedPlayerCores
    }

    /**
     * PlayerCore 엔티티 생성
     */
    private fun createPlayerCore(dto: PlayerApiSportsCreateDto): PlayerCore {
        return PlayerCore(
            uid = uidGenerator.generateUid(),
            name = dto.name ?: "Unknown",
            firstname = dto.firstname,
            lastname = dto.lastname,
            age = dto.age,
            nationality = dto.nationality,
            position = dto.position,
            autoGenerated = true
        )
    }
} 