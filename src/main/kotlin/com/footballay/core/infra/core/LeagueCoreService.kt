package com.footballay.core.infra.core

import com.footballay.core.infra.core.dto.LeagueCreateDto
import com.footballay.core.infra.core.util.UidGenerator
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.repository.LeagueCoreRepository
import jakarta.transaction.Transactional
import org.springframework.stereotype.Service

@Service
class LeagueCoreService (
    val leagueCoreRepository: LeagueCoreRepository,
    val uidGenerator: UidGenerator
) {

    // TODO : 읽기 검토는 완수했으나 테스트 코드로 검증이 필요합니다.
    @Transactional
    fun saveLeagues(dtos: List<LeagueCreateDto>): List<LeagueCore> {
        dtos.forEach { dto ->
            if (!uidGenerator.isValidUid(dto.uid))
                throw IllegalArgumentException("Invalid UID format: ${dto.uid} \n check UidGenerator")
        }

        val cores = dtos.map { dto ->
            LeagueCore(
                uid = dto.uid,
                name = dto.name,
                autoGenerated = dto.autoGenerated,
                available = false
            )}

        // 1) 내부 중복 제거
        val byUid = cores.groupBy { it.uid }
        if(dtos.size != byUid.size) {
            throw IllegalArgumentException("Duplicate UIDs found in the input list.")
        }

        // 2) DB 중복 검사
        val existing = leagueCoreRepository.findAllByUidIn(cores.map { it.uid })
            .map { it.uid }.toSet()
        if (existing.isNotEmpty()) {
            throw RuntimeException("Failed to save leagues due to existing UIDs: ${existing.joinToString(", ")}")
        }

        return leagueCoreRepository.saveAll(cores)
    }

}