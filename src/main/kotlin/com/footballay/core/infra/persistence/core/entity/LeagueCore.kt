package com.footballay.core.infra.persistence.core.entity

import jakarta.persistence.*

/**
 * uid 에 인덱스 필요 - 외부 노출 ID로 사용되기 때문
 */
@Entity
@Table(name = "refac_leagues")
data class LeagueCore(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long? = null,

    /**
     * 외부 노출 ID
     */
    @Column(name = "uid", unique = true)
    var uid: String,

    var name: String,

    var available: Boolean = false,

    /**
     * Provider data Sync 과정에서 자동으로 생성된 core 인 경우입니다. <br>
     * 관리자에 의해 체크가 필요한 경우를 나타냅니다. <br>
     */
    var autoGenerated: Boolean = true,

     @OneToMany(
         mappedBy = "league",
         cascade = [CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE],
         orphanRemoval = true
     )
    var leagueTeams: MutableSet<LeagueTeamCore> = mutableSetOf()
) {
    fun addTeam(team: TeamCore) {
        // 이미 관계가 있는지 확인 (중복 방지)
        val existingRelation = leagueTeams.any { it.team?.id == team.id }
        if (!existingRelation) {
            val leagueTeam = LeagueTeamCore().apply {
                this.league = this@LeagueCore
                this.team = team
            }
            leagueTeams.add(leagueTeam)
        }
    }

    fun removeTeam(team: TeamCore) {
        // 제거할 연관관계 객체 찾기
        val leagueTeamToRemove = leagueTeams.find { it.team?.id == team.id }

        leagueTeamToRemove?.let {
            // 컬렉션에서 객체 제거
            leagueTeams.remove(it)
            // 양방향 관계를 위해 team 쪽에서도 제거
            team.leagueTeams.remove(it)

            // 연관관계 참조 제거 (중요: 이렇게 해야 JPA가 연관관계 삭제를 인식함)
            it.team = null
            it.league = null
        }
    }
}
