package com.footballay.core.infra.persistence.core.entity

import jakarta.persistence.*

@Entity
@Table(name = "refac_teams")
data class TeamCore(

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long? = null,

    /**
     * 외부 노출 ID
     */
    @Column(name = "uid", unique = true)
    var uid: String,

    var name: String,

    var code: String? = null,

    var country: String? = null,

    var founded: Int? = null,

    var national: Boolean = false,

    var available: Boolean = false,

    /**
     * Core 엔티티에도 apiId를 두면, 동일 팀 중복여부 검사 시 편함
     */
    var apiId: Long? = null,

    /**
     * Provider data Sync 과정에서 자동으로 생성된 core 인 경우입니다. <br>
     * 관리자에 의해 체크가 필요한 경우를 나타냅니다. <br>
     */
    var autoGenerated: Boolean = true,

    @OneToMany(
        mappedBy = "team",
//        cascade = [CascadeType.PERSIST, CascadeType.MERGE],
        orphanRemoval = true
    )
    var leagueTeams: MutableSet<LeagueTeamCore> = mutableSetOf()
)  {
    fun addLeague(league: LeagueCore) {
        // 이미 관계가 있는지 확인 (중복 방지)
        val existingRelation = leagueTeams.any { it.league?.id == league.id && it.team?.id == this.id }
        if (!existingRelation) {
            val leagueTeam = LeagueTeamCore().apply {
                this.team = this@TeamCore
                this.league = league
            }
            leagueTeams.add(leagueTeam)
            // 양방향 관계 설정을 위해 league 쪽에도 추가
            league.leagueTeams.add(leagueTeam)
        }
    }

    fun removeLeague(league: LeagueCore) {
        // 제거할 연관관계 객체 찾기
        val leagueTeamToRemove = leagueTeams.find { it.league?.id == league.id }

        leagueTeamToRemove?.let {
            // 양쪽 컬렉션에서 객체 제거
            leagueTeams.remove(it)
            league.leagueTeams.remove(it)

            // 연관관계 참조 제거 (중요: 이렇게 해야 JPA가 연관관계 삭제를 인식함)
            it.team = null
            it.league = null
        }
    }

    fun getLeagues(): Set<LeagueCore> {
        return leagueTeams.mapNotNull { it.league }.toSet()
    }
}


