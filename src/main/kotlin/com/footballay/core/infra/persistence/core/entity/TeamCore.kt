package com.footballay.core.infra.persistence.core.entity

import com.footballay.core.infra.persistence.apisports.entity.TeamApiSports
import jakarta.persistence.*

@Entity
@Table(name = "refac_teams")
data class TeamCore(

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long? = null,

    /**
     * 외부 노출 ID
     */
    @Column(name = "uid", unique = true, nullable = false)
    var uid: String,

    /**
     * 팀 이름. API 에서 제공하는 네임 기반으로 채워지며 경우에 따라 풀네임 또는 흔히 알려진 이름만 저장될 수도 있습니다.
     */
    @Column(nullable = false)
    var name: String,

    var code: String? = null,

    var country: String? = null,

    var founded: Int? = null,

    var national: Boolean = false,

    // api id 는 절대 core 에 두면 안됩니다. api id 는 api 에 종속적이기 때문입니다. <br>
//    /**
//     * Core 엔티티에도 apiId를 두면, 동일 팀 중복여부 검사 시 편함
//     */
//    var apiId: Long? = null,

    @OneToOne(mappedBy = "teamCore", cascade = [CascadeType.ALL], optional = true)
    var teamApiSports : TeamApiSports? = null,

    /**
     * Provider data Sync 과정에서 자동으로 생성된 core 인 경우입니다. <br>
     * 관리자에 의해 체크가 필요한 경우를 나타냅니다. <br>
     */
    @Column(nullable = false)
    var autoGenerated: Boolean = true,

    @OneToMany(
        mappedBy = "team",
        orphanRemoval = true
    )
    var leagueTeams: MutableSet<LeagueTeamCore> = mutableSetOf(),

    @OneToMany(
        mappedBy = "team",
        orphanRemoval = true
    )
    var teamPlayers: MutableSet<TeamPlayerCore> = mutableSetOf()

)  {
    fun addLeague(league: LeagueCore) {
        val existingRelation = leagueTeams.any { it.league.id == league.id && it.team.id == this.id }
        if (!existingRelation) {
            val leagueTeam = LeagueTeamCore(
                league = league,
                team = this
            )
            this.leagueTeams.add(leagueTeam)
            league.leagueTeams.add(leagueTeam)
        }
    }

    fun removeLeague(league: LeagueCore) {
        val leagueTeamToRemove = leagueTeams.find { it.league.id == league.id }
        leagueTeamToRemove?.let {
            leagueTeams.remove(it)
            league.leagueTeams.remove(it)
        }
    }

    fun getLeagues(): Set<LeagueCore> {
        return leagueTeams.mapNotNull { it.league }.toSet()
    }

    override fun toString(): String {
        return "TeamCore(id=$id, uid=$uid, name=$name, code=$code, teamApiSportsId=${teamApiSports?.id})"
    }
}


