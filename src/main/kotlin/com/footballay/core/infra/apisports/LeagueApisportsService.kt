package com.footballay.core.infra.apisports

import com.footballay.core.infra.apisports.dto.LeagueApiSportsCreateDto
import com.footballay.core.infra.core.LeagueCoreService
import com.footballay.core.infra.core.util.UidGenerator
import com.footballay.core.infra.persistence.apisports.entity.LeagueApiSports
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsRepository
import com.footballay.core.infra.persistence.apisports.repository.LeagueApiSportsSeasonRepository
import com.footballay.core.infra.persistence.core.entity.LeagueCore
import com.footballay.core.infra.persistence.core.repository.LeagueCoreRepository
import jakarta.transaction.Transactional
import org.springframework.stereotype.Service

@Service
class LeagueApiSportsService(
    private val leagueApiSportsRepository: LeagueApiSportsRepository,
    private val leagueApiSportsSeasonRepository: LeagueApiSportsSeasonRepository,
    private val leagueCoreService: LeagueCoreService,
    private val leagueCoreRepository: LeagueCoreRepository,
    private val uidGenerator: UidGenerator
) {

    @Transactional
    fun saveLeagues(dtos: List<LeagueApiSportsCreateDto>) {
        // 1. 요청된 API ID 리스트 추출
        val apiIdList: List<Long> = dtos.map { it.apiId }

        // 2. LeagueApiSports 조회 및 Map으로 변환
        val apiIdEntityMap: Map<Long, LeagueApiSports> = leagueApiSportsRepository
            .findLeagueApiSportsInApiId(apiIdList)
            .associateBy { it.apiId }

        // 3. LeagueApiSportsCreateDto를 케이스별로 분류
        /*
        case (1): LeagueApiSports [O] LeagueCore [O]
        case (2): LeagueApiSports [O] LeagueCore [X]
        case (3): LeagueApiSports [X] LeagueCore [?]
         */
        val case1Dtos = mutableListOf<LeagueApiSportsCreateDto>()
        val case2Dtos = mutableListOf<LeagueApiSportsCreateDto>()
        val case3Dtos = mutableListOf<LeagueApiSportsCreateDto>()

        dtos.forEach { dto ->
            val apiEntity = apiIdEntityMap[dto.apiId]
            when {
                // (1) LeagueApiSports [O] LeagueCore [O]
                apiEntity != null && apiEntity.leagueCore != null -> case1Dtos.add(dto)
                // (2) LeagueApiSports [O] LeagueCore [X]
                apiEntity != null && apiEntity.leagueCore == null -> case2Dtos.add(dto)
                // (3) LeagueApiSports [X] LeagueCore [?]
                apiEntity == null -> case3Dtos.add(dto)
            }
        }

        // 4. 케이스 (1): LeagueApiSports 업데이트
        val case1Entities = case1Dtos.map { dto ->
            val apiEntity = apiIdEntityMap[dto.apiId]!!
            apiEntity.apply { updateApiEntityBy(dto) }
        }
        leagueApiSportsRepository.saveAll(case1Entities)

        // 5. 케이스 (2): LeagueCore 생성 및 LeagueApiSports 연관관계 설정
        val newLeagueCoresForCase2 = case2Dtos.map { dto ->
            val apiEntity = apiIdEntityMap[dto.apiId]!!
            val newCore = leagueCoreRepository.save(createCoreEntityBy(dto))
            apiEntity.leagueCore = newCore
            apiEntity
        }
        leagueApiSportsRepository.saveAll(newLeagueCoresForCase2)

        // 6. 케이스 (3): LeagueCore와 LeagueApiSports 모두 생성
        val newLeagueApiSportsForCase3 = case3Dtos.map { dto ->
            val newCore = leagueCoreRepository.save(createCoreEntityBy(dto))
            createApiEntity(newCore, dto)
        }
        leagueApiSportsRepository.saveAll(newLeagueApiSportsForCase3)
    }

    private fun createApiEntity(
        newCore: LeagueCore,
        dto: LeagueApiSportsCreateDto
    ) = LeagueApiSports(
        leagueCore = newCore,
        apiId = dto.apiId,
        name = dto.name,
        type = dto.type,
        logo = dto.logo,
        countryName = dto.countryName,
        countryCode = dto.countryCode,
        countryFlag = dto.countryFlag,
        currentSeason = dto.currentSeason
    )

    private fun createCoreEntityBy(dto: LeagueApiSportsCreateDto) = LeagueCore(
        uid = uidGenerator.generateUid(),
        name = dto.name,
        autoGenerated = true,
        available = false
    )

    private fun LeagueApiSports.updateApiEntityBy(dto: LeagueApiSportsCreateDto) {
        name = dto.name
        type = dto.type
        logo = dto.logo
        countryName = dto.countryName
        countryCode = dto.countryCode
        countryFlag = dto.countryFlag
        currentSeason = dto.currentSeason
    }

//    // TODO : AI에 의해 생성되었으므로 검토 및 테스트가 필요합니다.
//    @Transactional
//    fun saveLeagues(dtos: List<LeagueApiSportsCreateDto>) {
//        // 0) 존재하는 LeagueCore 엔티티 조회 / 새로운 LeagueCore 엔티티 생성
//        val apiIdList : List<Long> = dtos.map { it.apiId }
//
//        /*
//         # api id 를 바탕으로 league 조회시에는 3가지 케이스가 있습니다.
//         (1) LeagueApi [O] LeagueCore [O]
//         (2) LeagueApi [O] LeagueCore [X]
//         (3) LeagueApi [X] LeagueCore [?]
//         */
//        val apiIdEntityMap : Map<Long, LeagueApiSports> = leagueApiSportsRepository.findLeagueApiSportsInApiId(apiIdList).associateBy { it.apiId }
//        val needToCreateLeagueCore : Map<Long, LeagueApiSportsCreateDto> = dtos.filter { it.apiId !in apiIdEntityMap.keys }.associateBy { it.apiId }
//
//        // 0-1) 존재하지 않는 필요한 추가 LeagueCore 엔티티 생성
//        val leagueCoreDtoList: List<LeagueCreateDto> = needToCreateLeagueCore.values.map { LeagueCreateDto(uid = uidGenerator.generateUid(), name = it.name, autoGenerated = true) }
//        val savedCoreLeagues = leagueCoreService.saveLeagues(leagueCoreDtoList)
//
//
//        // 1) 존재하는 LeagueApiSports 엔티티 조회
//        val existingByApiId: Map<Long, LeagueApiSports> = leagueApiSportsRepository
//            .findAllByApiIdIn(dtos.map { it.apiId })
//            .filter { it.apiId != null }
//            .associateBy { it.apiId!! }
//
//        dtos.forEach { dto ->
//            // 2) Retrieve associated LeagueCore
//            val core = coreByUid[dto.coreUid]
//                ?: leagueCoreRepository.findByUid(dto.coreUid)
//                ?: throw IllegalArgumentException("No LeagueCore found for uid=${dto.coreUid}")
//
//            // 3) Create or update LeagueApiSports
//            val apiEntity = existingByApiId[dto.apiId]?.apply {
//                // Link core if missing
//                if (leagueCore == null) leagueCore = core
//                // Update fields
//                name = dto.name
//                type = dto.type
//                logo = dto.logo
//                countryName = dto.countryName
//                countryCode = dto.countryCode
//                countryFlag = dto.countryFlag
//                currentSeason = dto.currentSeason
//            } ?: LeagueApiSports(
//                leagueCore = core,
//                apiId = dto.apiId,
//                name = dto.name,
//                type = dto.type,
//                logo = dto.logo,
//                countryName = dto.countryName,
//                countryCode = dto.countryCode,
//                countryFlag = dto.countryFlag,
//                currentSeason = dto.currentSeason
//            )
//
//            val saved = leagueApiSportsRepository.save(apiEntity)
//
//            // 4) Upsert seasons per year (no deletes)
//            val existingSeasons: Map<Int, LeagueApiSportsSeason> = leagueApiSportsSeasonRepository
//                .findAllByLeagueApiSports(saved)
//                .associateBy { it.seasonYear ?: -1 }
//
//            val toSave = mutableListOf<LeagueApiSportsSeason>()
//            dto.seasons.forEach { sDto ->
//                val year = sDto.seasonYear ?: return@forEach
//                val seasonEntity = existingSeasons[year]?.apply {
//                    // update fields
//                    seasonStart = sDto.seasonStart
//                    seasonEnd = sDto.seasonEnd
//                    coverage = sDto.coverage?.let {
//                        LeagueApiSportsCoverage(
//                            fixturesEvents = it.fixturesEvents,
//                            fixturesLineups = it.fixturesLineups,
//                            fixturesStatistics = it.fixturesStatistics,
//                            fixturesPlayers = it.fixturesPlayers,
//                            standings = it.standings,
//                            players = it.players,
//                            topScorers = it.topScorers,
//                            topAssists = it.topAssists,
//                            topCards = it.topCards,
//                            injuries = it.injuries,
//                            predictions = it.predictions,
//                            odds = it.odds
//                        )
//                    }
//                } ?: LeagueApiSportsSeason(
//                    seasonYear = sDto.seasonYear,
//                    seasonStart = sDto.seasonStart,
//                    seasonEnd = sDto.seasonEnd,
//                    coverage = sDto.coverage?.let {
//                        LeagueApiSportsCoverage(
//                            fixturesEvents = it.fixturesEvents,
//                            fixturesLineups = it.fixturesLineups,
//                            fixturesStatistics = it.fixturesStatistics,
//                            fixturesPlayers = it.fixturesPlayers,
//                            standings = it.standings,
//                            players = it.players,
//                            topScorers = it.topScorers,
//                            topAssists = it.topAssists,
//                            topCards = it.topCards,
//                            injuries = it.injuries,
//                            predictions = it.predictions,
//                            odds = it.odds
//                        )
//                    },
//                    leagueApiSports = saved
//                )
//                toSave += seasonEntity
//            }
//            leagueApiSportsSeasonRepository.saveAll(toSave)
//        }
//    }
}
